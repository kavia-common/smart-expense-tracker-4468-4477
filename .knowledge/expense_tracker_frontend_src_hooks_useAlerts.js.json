{"is_source_file": true, "format": "JavaScript", "description": "This file defines a React custom hook called useAlerts, which fetches alert data from an API endpoint, with fallback to client-side computation of budget overruns if the API call fails or returns no data. It includes internal logic for computing alerts based on spending and budgets data.", "external_files": ["../api/client"], "external_methods": ["getApi"], "published": ["useAlerts"], "classes": [], "methods": [{"name": "useAlerts({ spendingByCategory = [], budgets = [] } = {})", "description": "A React hook that fetches alerts from an API or computes client-side alerts based on spending and budgets data.", "scope": "", "scopeKind": ""}, {"name": "computeOverruns(spendingByCategory, budgets)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["getApi", "api.get", "computeOverruns"], "search-terms": ["useAlerts", "fetches alerts", "budget overrun alerts", "React hook", "client-side fallback", "useEffect", "useMemo", "useState"], "state": 2, "file_id": 47, "knowledge_revision": 121, "git_revision": "", "ctags": [{"_type": "tag", "name": "computeOverruns", "path": "/home/kavia/workspace/code-generation/smart-expense-tracker-4468-4477/expense_tracker_frontend/src/hooks/useAlerts.js", "pattern": "/^function computeOverruns(spendingByCategory, budgets) {$/", "language": "JavaScript", "kind": "function", "signature": "(spendingByCategory, budgets)"}, {"_type": "tag", "name": "useAlerts", "path": "/home/kavia/workspace/code-generation/smart-expense-tracker-4468-4477/expense_tracker_frontend/src/hooks/useAlerts.js", "pattern": "/^export default function useAlerts({ spendingByCategory = [], budgets = [] } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "({ spendingByCategory = [], budgets = [] } = {})"}], "hash": "3239ae8f9ebd153932ef8f7c5b0a80b4", "format-version": 4, "code-base-name": "expense_tracker_frontend", "filename": "expense_tracker_frontend/src/hooks/useAlerts.js", "revision_history": [{"121": ""}]}