openapi: 3.0.3
info:
  title: Smart Expense Tracker API
  version: "0.1.0"
  description: |
    REST API for transactions, budgets, goals, reports and health.
servers:
  - url: http://localhost:8080
tags:
  - name: Health
  - name: Transactions
  - name: Budgets
  - name: Goals
  - name: Reports
  - name: Categories
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /transactions:
    get:
      tags: [Transactions]
      summary: List transactions
      parameters:
        - in: query
          name: limit
          schema: { type: integer, maximum: 200 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: accountId
          schema: { type: string, format: uuid }
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: category
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Transactions list
          content:
            application/json:
              schema:
                type: array
                items: { type: object }
    post:
      tags: [Transactions]
      summary: Create transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, amount, direction, transaction_date]
              properties:
                user_id: { type: string, format: uuid }
                account_id: { type: string, format: uuid, nullable: true }
                category_id: { type: string, format: uuid, nullable: true }
                amount: { type: number }
                direction: { type: string, enum: [inflow, outflow] }
                description: { type: string, nullable: true }
                transaction_date: { type: string, format: date }
      responses:
        "201":
          description: Created
  /transactions/{id}:
    put:
      tags: [Transactions]
      summary: Update transaction
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        "200": { description: Updated }
    delete:
      tags: [Transactions]
      summary: Delete transaction
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: Deleted indicator }
  /transactions/summary:
    get:
      tags: [Transactions]
      summary: Summary by period
      parameters:
        - in: query
          name: range
          schema: { type: string, enum: [week, month, year], default: month }
      responses:
        "200": { description: Summary list }
  /budgets:
    get:
      tags: [Budgets]
      summary: List budgets with spent and overrun flag
      responses:
        "200": { description: Budgets list }
    post:
      tags: [Budgets]
      summary: Create budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, category_id, month, limit_amount]
              properties:
                user_id: { type: string, format: uuid }
                category_id: { type: string, format: uuid }
                month: { type: string, format: date }
                limit_amount: { type: number }
      responses:
        "201": { description: Created }
  /budgets/{id}:
    put:
      tags: [Budgets]
      summary: Update budget
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        "200": { description: Updated }
    delete:
      tags: [Budgets]
      summary: Delete budget
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: Deleted }
  /goals:
    get:
      tags: [Goals]
      summary: List goals
      responses:
        "200": { description: Goals list }
    post:
      tags: [Goals]
      summary: Create goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, name, target_amount]
              properties:
                user_id: { type: string, format: uuid }
                name: { type: string }
                target_amount: { type: number }
                current_amount: { type: number }
                target_date: { type: string, format: date }
      responses:
        "201": { description: Created }
  /goals/{id}:
    put:
      tags: [Goals]
      summary: Update goal
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object }
      responses:
        "200": { description: Updated }
    delete:
      tags: [Goals]
      summary: Delete goal
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: Deleted }
  /reports/spending-by-category:
    get:
      tags: [Reports]
      summary: Spending by category for period
      description: |
        Returns total outflows grouped by expense categories for a given period.
        - Default period is current month when no query is provided.
        - If `from`/`to` are provided (YYYY-MM-DD), they override `range`.
        - `range=quarter` or `range=3months` will include the current month and previous 2 months.
      parameters:
        - in: query
          name: range
          description: Period preset. If from/to are provided, they override range.
          schema:
            type: string
            enum: [month, quarter, 3months]
            default: month
        - in: query
          name: from
          description: Inclusive start date (YYYY-MM-DD)
          schema: { type: string, format: date }
        - in: query
          name: to
          description: Inclusive end date (YYYY-MM-DD)
          schema: { type: string, format: date }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        "200":
          description: List of categories with totals
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    categoryName: { type: string, example: "Food & Dining" }
                    total: { type: number, example: 245.75, description: "Positive sum of outflows for the category in the period" }
                    currency: { type: string, example: "USD" }
  /reports/income-vs-expense:
    get:
      tags: [Reports]
      summary: Income vs Expense by month for period
      description: |
        Returns monthly totals for income vs expense for the selected period.
        - Default period is current month.
        - For `range=quarter` or `range=3months`, the result aggregates the current month plus previous 2 months.
        - If `from`/`to` are provided, they override `range` and the output includes each month within the bounds.
      parameters:
        - in: query
          name: range
          description: Period preset. If from/to are provided, they override range.
          schema:
            type: string
            enum: [month, quarter, 3months]
            default: month
        - in: query
          name: from
          description: Inclusive start date (YYYY-MM-DD)
          schema: { type: string, format: date }
        - in: query
          name: to
          description: Inclusive end date (YYYY-MM-DD)
          schema: { type: string, format: date }
      responses:
        "200":
          description: Periodized income vs expense list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    period: { type: string, example: "2025-03" }
                    income: { type: number, example: 5500.00 }
                    expense: { type: number, example: 3240.25, description: "Positive totals of outflows" }
                    net: { type: number, example: 2259.75, description: "income - expense" }
  /reports/alerts:
    get:
      tags: [Reports]
      summary: Alerts (stub)
      responses:
        "200": { description: List of alerts (empty for now) }
  /categories:
    get:
      tags: [Categories]
      summary: List categories
      description: |
        Returns categories ordered by name. Supports filtering by type and user_id, and optionally including global defaults.
      parameters:
        - in: query
          name: type
          schema: { type: string, enum: [income, expense] }
          description: Filter by category type.
        - in: query
          name: user_id
          schema: { type: string, format: uuid }
          description: User UUID to fetch user-specific categories.
        - in: query
          name: include_defaults
          schema: { type: boolean }
          description: When true and user_id provided, include global defaults too. Default true if user_id is provided.
      responses:
        "200":
          description: Categories list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string, format: uuid }
                    user_id: { type: string, format: uuid, nullable: true }
                    name: { type: string }
                    type: { type: string, enum: [income, expense] }
                    icon: { type: string, nullable: true }
                    is_default: { type: boolean }
